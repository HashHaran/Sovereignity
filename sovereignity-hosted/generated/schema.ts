// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Content extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Content entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Content must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Content", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Content | null {
    return changetype<Content | null>(store.get("Content", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contentId(): string {
    let value = this.get("contentId");
    return value!.toString();
  }

  set contentId(value: string) {
    this.set("contentId", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get creationTimeStamp(): BigInt {
    let value = this.get("creationTimeStamp");
    return value!.toBigInt();
  }

  set creationTimeStamp(value: BigInt) {
    this.set("creationTimeStamp", Value.fromBigInt(value));
  }

  get permissions(): Array<Bytes> {
    let value = this.get("permissions");
    return value!.toBytesArray();
  }

  set permissions(value: Array<Bytes>) {
    this.set("permissions", Value.fromBytesArray(value));
  }
}

export class ContentPermission extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContentPermission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ContentPermission must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContentPermission", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ContentPermission | null {
    return changetype<ContentPermission | null>(
      store.get("ContentPermission", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get content(): Bytes {
    let value = this.get("content");
    return value!.toBytes();
  }

  set content(value: Bytes) {
    this.set("content", Value.fromBytes(value));
  }

  get permittedUser(): Bytes {
    let value = this.get("permittedUser");
    return value!.toBytes();
  }

  set permittedUser(value: Bytes) {
    this.set("permittedUser", Value.fromBytes(value));
  }

  get permittedTimeStamp(): BigInt {
    let value = this.get("permittedTimeStamp");
    return value!.toBigInt();
  }

  set permittedTimeStamp(value: BigInt) {
    this.set("permittedTimeStamp", Value.fromBigInt(value));
  }
}
